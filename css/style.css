*{
    margin: 0;
    padding: 0;
} /*Анульовую відступи що присвоєні рядковим і блочним тегам за замовчуванням*/

@media (min-width: 1400px){ /*Задаю мінімальну ширину екрану для спрацьовування адаптивних властивостей
    і все що пише в межах цього медіа-запиту відноситься тільки для екранів із шириною 1400 і більше пікселів*/

    .container{ /*Тут використовую властивості Grid тому що вони дуже добре підходять для такого незвичного розташування елементів
        і їхній плюс в тому що деякі властивості до елементів можна задавати через батьківський елемент а не напряму прописувати кожному*/
        width: 100%;
        height: 600px;
        display: grid;
        justify-content: center;
        align-content: center;
        grid-template-rows: 30px 144px 30px; /*Тут зробив так щоб container ділився умовно на 3 рядки по порядку ( 30px 144px 30px )*/
        grid-template-columns: 656px; /*тут задав одну колонку ( ширину області розміщення елементів у контейнері )*/
        background-color: lightgreen;
    }

    main{ /*тут влкстивості вже прописую для того щоб розмежувати на умовні лінії сам блок із адаптивними комірками*/
        display: grid;
        grid-template-rows: repeat(3, 48px);/*задаю 3 рядки по 48 px*/
        grid-template-columns: repeat(12, 1fr);/*умовно розділяю блок з елементами на 12 колонок*/
    }
    .colors0{
        grid-column: 1 / span 4; /*за допомогою цієї властивості говорю кожному елементу в яких межах вище створених умовних колонок
        має розміщуватись кожен елемент ( 1 це перша колонка включно а span 4 це наступні колонки не включаючи останню*/
    }
    .colors1{
        grid-column: 5 / span 4;
    }
    .colors2{
        grid-column: 9 / span 4;
    }
    .colors3{
        grid-column: 1 / span 4;
    }
    .colors4{
        grid-column: 5 / span 4;
    }
    .colors5{
        grid-column: 9 / span 4;
    }
    .colors6{
        grid-column: 1 / span 3;
    }
    .colors7{
        grid-column: 4 / span 3;
    }
    .colors8{
        grid-column: 7 / span 3;
    }
    .colors9{
        grid-column: 10 / span 3;
    }
}/*тут закінчується перший медіа-запит, 
а нище до наступного медіазапиту властивості що застосовуються для елементів постійно, незважаючи на медіа-запити ( якщо той їх не перекриває )*/

header, footer, div{
    outline: 2px solid black;
    display: flex;
    align-items: center;
    justify-content: center;
}
header{
    background-color: #6aadc6;
}
footer{
    background-color: #0070c2;
}
p{
    font-size: 24px;
    font-weight: 700;
    text-align: center;
    text-transform: uppercase;
    color: #fcfcfc;
}
.colors0{
    background-color: #f6ecf3;
}
.colors1{
    background-color: #ebd9e7;
}
.colors2{
    background-color: #dab3d0;
}
.colors3{
    background-color: #c78db6;
}
.colors4{
    background-color: #b3679f;
}
.colors5{
    background-color: #a14286;
}
.colors6{
    background-color: #e7ecf0;
}
.colors7{
    background-color: #acbdcd;
}
.colors8{
    background-color: #5d7e9d;
}
.colors9{
    background-color: #0c406f;
}

/*в кожному із наступних медіазапитів я просто міняю структуру їх розташувань і вже тут всюди розміри кожної з комірок блоку main є однакові*/
@media (min-width: 992px) and (max-width: 1400px){

    .container{
        width: 100%;
        height: 600px;
        display: grid;
        background-color: lightcoral;
        grid-template-rows: 30px 240px 30px;
        grid-template-columns: 656px;
        justify-content: center;
        align-content: center;
    }
    main{
        display: grid;
        grid-template-columns: 50% 50%;
        grid-template-rows: repeat(5, 48px);
    }

}


@media (max-width: 992px){
    .container{
        width: 100%;
        height: 600px;
        display: grid;
        background-color: burlywood;
        grid-template-rows: 30px 480px 30px;
        grid-template-columns: 656px;
        justify-content: center;
        align-content: center;
    }
    main{
        display: grid;
        grid-template-columns: 100%;
        grid-template-rows: repeat(10, 48px);
    }
}